import queue
#This program is to execute breadth first maze shortest path through a maze while hitting multiple goals

# Define a class to represent a maze
class Maze:
    def __init__(self, filename):
        self.grid = []
        self.start = None
        self.goals = []
        with open(filename) as f:
            lines = f.readlines()
            for i in range(len(lines)):
                row = []
                for j in range(len(lines[i])-1):
                    if lines[i][j] == '%':
                        row.append(None)
                    elif lines[i][j] == 'P':
                        self.start = (i, j)
                        row.append('.')
                    elif lines[i][j] == '.':
                        self.goals.append((i, j))
                        row.append('.')
                    else:
                        row.append('.')
                self.grid.append(row)

    
    def bfs_multiple(self, node_limit=float('inf')):
        fringe = queue.Queue()
        start_state = (self.start, frozenset(self.goals), 0)
        visited = set()
        fringe.put(start_state)
        nodes_expanded = 0
        while not fringe.empty() and nodes_expanded < node_limit:
            state = fringe.get()
            nodes_expanded += 1
            if state[1] == frozenset():
                # Found a path to all goals
                path = []
                cost = state[2]
                while state != start_state:
                    path.append(state[0])
                    state = state[3]
                path.reverse()
                return path, cost, nodes_expanded
            if state in visited:
                continue
            visited.add(state)
            for successor in self.get_successors(state):
                fringe.put(successor)
        return None, float('inf'), nodes_expanded

    
    def astar_multiple(self, heuristic, node_limit=float('inf')):
        fringe = queue.PriorityQueue()
        start_state = (self.start, frozenset(self.goals), 0)
        visited = set()
        fringe.put((heuristic(start_state), start_state))
        nodes_expanded = 0
        while not fringe.empty() and nodes_expanded < node_limit:
            _, state = fringe.get()
            nodes_expanded += 1
            if state[1] == frozenset():
                # Found a path to all goals
                path = []
                cost = state[2]
                while state != start_state:
                    path.append(state[0])
                    state = state[3]
                path.reverse()
                return path, cost, nodes_expanded
            if state in visited:
                continue
            visited.add(state)
            for successor in self.get_successors(state):
                fringe.put((heuristic(successor) + successor[2], successor))
        return None, float('inf'), nodes_expanded
    
    
    def get_successors(self, state):
        successors = []
        for action in [(0,1), (0,-1), (1,0), (-1,0)]:
            i = state[0][0] + action[0]
            j = state[0][1] + action[1]
            if i < 0 or i >= len(self.grid) or j < 0 or j >= len(self.grid[i]) or self.grid[i][j] is None:
                continue
            new_goals = set(state[1])
            if (i,j) in new_goals:
                new_goals.remove((i,j))
            successors.append(((i,j), frozenset(new_goals), state[2]+1, state))
        return successors
    
    def manhattan_sum(self, state):
        pos, goals, cost = state
        if not goals:
            return 0
        return sum([abs(pos[0]-g[0])+abs(pos[1]-g[1]) for g in goals])


# This code is to  Instantiate Maze objects
tiny_maze = Maze('tiny_search.txt')
small_maze = Maze('small_search.txt')
tricky_maze = Maze('trick_search.txt')

# This code is  for getting Breadth-First Search with multiple goals
print('Breadth-First Search with multiple goals:')
for maze in [tiny_maze, small_maze, tricky_maze]:
    print('Maze:', maze.grid)
    path, cost, nodes_expanded = maze.bfs_multiple()
    print('Path:', path)
    print('Cost:', cost)
    print('Nodes Expanded:', nodes_expanded)
    print()

# A* Search with multiple goals and Manhattan distance heuristic
print('A* Search with multiple goals and Manhattan distance heuristic:')
for maze in [tiny_maze, small_maze, tricky_maze]:
    print('Maze:', maze.grid)
    path, cost, nodes_expanded = maze.astar_multiple(manhattan_distance)
    print('Path:', path)
    print('Cost:', cost)
    print('Nodes Expanded:', nodes_expanded)
    print()


